// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  name, description, price
) VALUES (
  $1, $2, $3
)
RETURNING id, name, description, price, created_at, updated_at
`

type CreateItemParams struct {
	Name        string
	Description pgtype.Text
	Price       int64
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem, arg.Name, arg.Description, arg.Price)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  user_id, item_id, quantity
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, item_id, quantity, created_at
`

type CreateOrderParams struct {
	UserID   pgtype.Text
	ItemID   pgtype.UUID
	Quantity int32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.ItemID, arg.Quantity)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, name, email, password
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, email, password, created_at, updated_at
`

type CreateUserParams struct {
	ID       string
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const deleteOrder = `-- name: DeleteOrder :one
INSERT INTO orders (
  user_id, item_id, quantity
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, item_id, quantity, created_at
`

type DeleteOrderParams struct {
	UserID   pgtype.Text
	ItemID   pgtype.UUID
	Quantity int32
}

func (q *Queries) DeleteOrder(ctx context.Context, arg DeleteOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, deleteOrder, arg.UserID, arg.ItemID, arg.Quantity)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, description, price, created_at, updated_at FROM items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetItemByID(ctx context.Context, id pgtype.UUID) (Item, error) {
	row := q.db.QueryRow(ctx, getItemByID, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT id, name, description, price, created_at, updated_at FROM items LIMIT $1 OFFSET $2
`

type GetItemsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetItems(ctx context.Context, arg GetItemsParams) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, item_id, quantity, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, user_id, item_id, quantity, created_at FROM orders LIMIT $1 OFFSET $2
`

type GetOrdersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrders(ctx context.Context, arg GetOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, user_id, item_id, quantity, created_at FROM orders
WHERE user_id = $1 LIMIT $2 OFFSET $3
`

type GetOrdersByUserIDParams struct {
	UserID pgtype.Text
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrdersByUserID(ctx context.Context, arg GetOrdersByUserIDParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE users
SET name = $2,
    email = $3,
    password = $4,
    updated_at = now()
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID       string
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
SET name = $2,
    description = $3,
    price = $4,
    updated_at = now()
WHERE id = $1
`

type UpdateItemParams struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	Price       int64
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.Exec(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	return err
}
